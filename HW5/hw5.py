import pathlib
from typing import Union, Tuple

import numpy as np
import pandas as pd


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        try:
            self.data_fname = pathlib.Path(data_fname).resolve()
        except TypeError("Please provide a path"):
            raise
        if not self.data_fname.exists():
            raise ValueError(f"File {str(self.data_fname)} doesn't exist.")
        # If the path doesnâ€™t exist and strict is True, FileNotFoundError is raised.

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
        return self.data

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
          Number of people in a given bin
        bins : np.ndarray
          Bin edges
        """

        hist, bins = np.histogram(self.data["age"].dropna(), bins=np.linspace(0, 100, 11))
        self.data.hist(column="age", bins=bins)
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
      A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
      the (ordinal) index after a reset.
        """
        email_pattern = self.data[
            self.data["email"].str.match(r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)")]  # Using RegEx
        return email_pattern.reset_index(drop=True)

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
      The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
          Row indices of the students that their new grades were generated
        """
        q_columns = self.data.filter(items=['q1', 'q2', 'q3', 'q4', 'q5'])
        return self.data.fillna(self.data.mean()['q1':'q5']), self.data[q_columns.isnull().any(axis=1)].index.to_numpy()

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        data = self.data
        bool_data = data.loc[:, "q1":"q5"].isnull().sum(axis=1) > maximal_nans_per_sub
        score = np.zeros(shape=[len(data), 1])
        score[bool_data] = np.nan
        # Where bool_data is True --> set value as nan
        score[bool_data == False, 0] = data.loc[bool_data == False, "q1":"q5"].mean(axis=1)
        score = np.round(score - 0.5).flatten()
        # Since np rounds up toward the nearest integer, we deduct 0.5 elementwise -as a way to round down each element.
        score = pd.Series(score, dtype='UInt8')
        #  Pandas uses NA as its missing value, rather than numpy.nan.
        data["score"] = score
        return data

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
        """
        data = self.data.set_index(["gender", "age"], append=True)
        grouped_data = data.groupby([None, lambda age: age > 40], level=["gender", "age"])
        return grouped_data.mean().loc[:, "q1":"q5"]
